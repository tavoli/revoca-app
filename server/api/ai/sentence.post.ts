import { z } from 'zod'
import {insertAiSentences} from '~/server/repositories/sentence/sentences.repository'
import {NewAiSentence} from '~/server/repositories/sentence/sentences.table'

const aiSentenceBodySchema = z.object({
  id: z.string(),
  parent: z.number(),
  sentence: z.string(), 
})

/**
 * @openapi
 *
 * /ai/sentence:
 *   post:
 *     security:
 *       - HeaderAuth: []
 *
 *     summary: Create a new AI sentence
 *     description: Create a sentence that is generated by the AI
 *
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               id:
 *                 type: string
 *                 format: string
 *                 description: The id of the sentence generated on the client
 *               sentence:
 *                 type: string
 *                 format: string
 *               parent:
 *                 type: number
 *                 format: number
 *                 description: The id of the parent sentence
 *           example:
 *             id: "zxcvbnm"
 *             sentence: "This is a sentence"
 *             parent: 123
 *
 *     responses:
 *       '200':
 *         description: The sentence was created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Ok'
 *       '400':
 *         description: The request body was invalid
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ValidationIssues'
 *       '401':
 *         description: Unauthorized
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Unauthorized'
 *       '500':
 *         description: An internal server error occurred
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/InternalServerError'
 */

export default defineEventHandler(async (event) => {
  const result = await readValidatedBody(event, (body) => aiSentenceBodySchema.safeParse(body))

  if (!result.success) {
    throw createError({
      message: 'Invalid body',
      data: result.error.issues,
      statusCode: 400,
    })
  }

  const body = result.data

  const user = event.context.user
  if (!user) {
    throw createError({
      message: 'Unauthorized',
      statusCode: 401,
    })
  }

  const data: NewAiSentence = {
    id: body.id,
    sentence: body.sentence,
    sentence_id: body.parent,
    user_id: user.id,
  }

  try {
    await insertAiSentences(db, data)
  } catch (error) {
    throw createError({
      message: 'An internal server error occurred',
      data: error,
      statusCode: 500,
    })
  }

  return { ok: true }
})
